name: CLI Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name: [linux-gcc-9]
        include:
          - name: linux-gcc-9
            os: ubuntu-18.04
            compiler: "gcc"
            version: "9"

    steps:
    - uses: actions/checkout@v2

    - name: Install (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
          # Install compiler

          cc="${{ matrix.compiler }}-${{ matrix.version }}"
          cc="${cc%-}"
          cxx="${cc/clang/clang++}"
          cxx="${cxx/gcc/g++}"

          sudo apt-get update
          sudo apt-get install -y libtool m4 autoconf
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
              sudo apt-get install -y "${cxx}"
          else
              sudo apt-get install -y "${cc}"
          fi
          echo "CC=${cc}" >> $GITHUB_ENV
          echo "CXX=${cxx}" >> $GITHUB_ENV

    - name: Install bats
      if: runner.os == 'Linux'
      shell: bash
      run: |
          # Install bats
          git clone https://github.com/sstephenson/bats.git
          cd bats
          sudo ./install.sh /usr/local

    - name: Create Build Environment
      shell: bash
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Debug \
            -DPISA_ENABLE_BENCHMARKING=OFF \
            -DPISA_ENABLE_TESTING=OFF \
            -DPISA_CI_BUILD=ON \
            -DPISA_BUILD_TOOLS=ON ..

    - name: Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config Debug -- -j 4

    - name: Test CLI
      shell: bash
      working-directory: ${{runner.workspace}}/build
      env:
          TEST_DIR: ../pisa/test
      run: ../pisa/test/cli/run.sh
