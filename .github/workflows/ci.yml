name: Build and test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name: [linux-gcc-9, linux-gcc-7, linux-clang-6, linux-clang-10, macos-gcc-9, macos-xcode-11.3]
        include:
          - name: linux-gcc-9
            os: ubuntu-latest
            compiler: "gcc"
            version: "9"
          - name: linux-gcc-7
            os: ubuntu-latest
            compiler: "gcc" # default on bionic: gcc-7
          - name: linux-clang-6
            os: ubuntu-latest
            compiler: "clang"
            version: "6.0"
          - name: linux-clang-10
            os: ubuntu-latest
            compiler: "clang"
            version: "10"
          - name: macos-gcc-9
            os: macos-latest
            compiler: "gcc"
            version: "9"
          - name: macos-xcode-11.3
            os: macos-latest
            compiler: "xcode"
            version: "11.3"
    steps:
    - uses: actions/checkout@v2

    - name: Install (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
          # Install compiler

          cc="${{ matrix.compiler }}-${{ matrix.version }}"
          cc="${cc%-}"
          cxx="${cc/clang/clang++}"
          cxx="${cxx/gcc/g++}"

          if [ "${cc}" = "clang-10" ]; then
            wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main"
            sudo apt-get remove libstdc++-10-dev libgcc-10-dev cpp-10
          fi
          if [ "${cc}" = "clang-6.0" ]; then
            # Problems compiling with Clang 6 against libstdc++-9
            sudo apt-get remove libstdc++-9-dev libgcc-9-dev cpp-9
            sudo apt-get remove libstdc++-10-dev libgcc-10-dev cpp-10
          fi
          sudo apt-get update
          sudo apt-get install -y libtool m4 autoconf
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
              sudo apt-get install -y "${cxx}"
          else
              sudo apt-get install -y "${cc}"
          fi
          echo "::set-env name=CC::${cc}"
          echo "::set-env name=CXX::${cxx}"
    - name: Install (macOS)
      if: runner.os == 'macOS'
      run: |
          brew install autoconf automake libtool cmake
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            echo "::set-env name=CC::gcc-${{ matrix.version }}"
            echo "::set-env name=CXX::g++-${{ matrix.version }}"
          else
            sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app
            echo "::set-env name=CC::$(xcrun -f clang)"
            echo "::set-env name=CXX::$(xcrun -f clang++)"
            echo "::set-env name=SDKROOT::$(xcodebuild -version -sdk macosx Path)"
            echo "::set-env name=PATH::$(dirname $(xcrun -f clang)):$PATH"
          fi
    - name: Create Build Environment
      shell: bash
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Debug -DPISA_BUILD_TOOLS=ON ..

    - name: Build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config Debug -- -j 4

    - name: Test
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest -VV -j 4
